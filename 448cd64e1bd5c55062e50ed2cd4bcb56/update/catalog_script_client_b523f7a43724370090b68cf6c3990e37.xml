<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="catalog_script_client">
    <catalog_script_client action="INSERT_OR_UPDATE">
        <active>true</active>
        <applies_catalog>true</applies_catalog>
        <applies_extended>false</applies_extended>
        <applies_req_item>false</applies_req_item>
        <applies_sc_task>false</applies_sc_task>
        <applies_target_record>false</applies_target_record>
        <applies_to>set</applies_to>
        <cat_item/>
        <cat_variable/>
        <condition/>
        <description/>
        <field/>
        <global>true</global>
        <isolate_script>true</isolate_script>
        <messages/>
        <name>Parse sysparm_variables URI param</name>
        <order>100000</order>
        <published_ref/>
        <script><![CDATA[/*
	This script is part of a variable set which can be included on any catalog item, in order to enable this functionality.
	When this script (or the "Set variables from URL" variable set) are included on a catalog item, then any variable(s) on that catalog item can be set on-load, by manipiulating the URL to the catalog item. You'll simply need to add a URI parameter called "sysparm_variables", and set the value of that parameter to a JSON-formatted string containing key/value pairs, where the key is a valid variable name, and the value is a valid value for that variable (for example, a sys_id in the case of a reference field).
	
	The contents of the sysparm_variables object should be minimally encoded first as a JSON object, and secondly as a URL.
	JSON encoding means you'll need to escape certain characters (such as backslashes) like so:
		{"os_root":"C:\\windows"}
	Notice how I've used two backaslashes after "C:" in the value above? This is the escape sequence for a single backslash.
	
	URL encoding means that you'll need to escape certain other characters (such as spaces and ampersands) with URL-encoding sequences like so:
		{"name":"Tim%20Woodruff"}
	Notice how I've used "%20" in place of the space between my first and last name. This is because URLs do not accept spaces (though most browsers handle that for you automatically, which we'll discuss below)
	
	Most modern programming languages (including JavaScript) also have methods for encoding and decoding URLs, so you can take any JSON-encoded string, run it through one of those functions, and use the result in your URL. *IF* you're URL-encoding something with backslashes in it, you'll have to *double-escape* them - they'll be escaped for the JSON encoding, and again for the URL encoding. For example:
		encodeURIComponent('{"program_files_dir":"C:\\\\Program Files (x86)"}');
	The above line of code will print the following string:
		%7B%22program_files_dir%22%3A%22C%3A%5C%5CProgram%20Files%20(x86)%22%7D
	If you look closely, you'll see the URL-encoded backslash character ("%5C") twice, not four times. This is because the "encodeURIComponent" function interpreted only two escaped backslashes, rather than four unescaped backslashes. That results in the correctly encoded version of the string "C:\Program Files (x86)", because when un-encoded, the two remaining backslashes will be interpreted as, again, a single *escaped* backslash. If you're not pre-URL-encoding the sysparm_variables object's value, then you only need to escape backslashes once, as mentioned above.
	
	Most browsers will automatically encode URLs with invalid characters, but it's best to be safe and at least encode certain characters. You can manually URL-encode certain characters like spaces (%20) without having to worry about all of the extra bother of double-escaping stuff like backslashes.
	
	Example usage: Simply append the following to the URL of the catalog item in either your service portal, or the classic UI:
		&sysparm_variables={"catalog_variable_name":"variable%20value","var_name_2":"second%20variable%20value"}
	
	This functionality should function identically for catalog items on both the classic, and the portal UI.
*/
function onLoad() {
	
	var prop, propVal;
	//get parameter from URL
	var objVariables = getParameterValue('sysparm_variables');
	console.debug('sysparm_variables URI parameter value: ' + objVariables);
	if (!objVariables || objVariables == '' || objVariables.indexOf('{') != 0) {
		//If variables is empty or not properly formatted, stop here.
		console.debug('aborting due to a missing or problematic sysparm_variables URI parameter');
		return;
	}
	objVariables = JSON.parse(objVariables);
	console.debug('sysparm_variables URI parameter value: ' + JSON.stringify(objVariables));
	
	for (prop in objVariables) {
		if (!objVariables.hasOwnProperty(prop)) {
			break;
		}
		propVal = objVariables[prop];
		console.debug('Processing property ' + prop + ' with value ' + propVal);
		
		if (g_form.hasField(prop)) {
			console.debug('Setting variable ' + prop + ' to value ' + propVal);
			g_form.setValue(prop, propVal);
		} else {
			console.warn('Variable ' + prop +
				', specified in the sysparm_variables URI parameter, does not exist on this catalog item form.');
		}
	}
}

function getParameterValue(name) {
	name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
	var regexS = "[\\?&]" + name + "=([^&#]*)";
	var regex = new RegExp(regexS);
	//Check if portal (gel=undefined) or classic UI, and get the HREF data appropriately in either case.
	var hrefPath = (typeof gel == 'undefined') ? this.location.href : top.location.href;
	var results = regex.exec(hrefPath);
	
	console.debug('HREF: ' + hrefPath);
	
	if (results == null) {
		return "";
	} else {
		return unescape(results[1]);
	}
}]]></script>
        <sys_class_name>catalog_script_client</sys_class_name>
        <sys_created_by>SNProTips</sys_created_by>
        <sys_created_on>2019-03-29 18:18:29</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>b523f7a43724370090b68cf6c3990e37</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name>Parse sysparm_variables URI param</sys_name>
        <sys_overrides/>
        <sys_package display_value="Global" source="global">global</sys_package>
        <sys_policy/>
        <sys_scope display_value="Incident to Request Conversion">448cd64e1bd5c55062e50ed2cd4bcb56</sys_scope>
        <sys_update_name>catalog_script_client_b523f7a43724370090b68cf6c3990e37</sys_update_name>
        <sys_updated_by>John.Schwab</sys_updated_by>
        <sys_updated_on>2023-01-10 16:44:00</sys_updated_on>
        <table/>
        <type>onLoad</type>
        <ui_type>10</ui_type>
        <va_supported>false</va_supported>
        <variable_set display_value="Related Incident or RITM">74c273a43724370090b68cf6c3990ea4</variable_set>
        <view/>
    </catalog_script_client>
    <sys_claim action="INSERT_OR_UPDATE">
        <claim_owner_scope display_value="Incident to Request Conversion">448cd64e1bd5c55062e50ed2cd4bcb56</claim_owner_scope>
        <claim_timestamp>17ea155c7a90000001</claim_timestamp>
        <metadata_update_name>catalog_script_client_b523f7a43724370090b68cf6c3990e37</metadata_update_name>
        <previous_claim_app_version>1.0.0</previous_claim_app_version>
        <previous_claim_name>Incident to Request Conversion</previous_claim_name>
        <previous_claim_scope>448cd64e1bd5c55062e50ed2cd4bcb56</previous_claim_scope>
        <sys_created_by>Terry.Lillo</sys_created_by>
        <sys_created_on>2022-01-28 15:37:40</sys_created_on>
        <sys_id>0a8d96021b19c55062e50ed2cd4bcb1e</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>Terry.Lillo</sys_updated_by>
        <sys_updated_on>2022-01-28 15:37:40</sys_updated_on>
    </sys_claim>
</record_update>
